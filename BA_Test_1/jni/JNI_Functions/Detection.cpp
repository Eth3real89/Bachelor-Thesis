#include "Functions/ProcessingFunctions.hpp"
#include "Constants.hpp"
#include "JNI_FUNCTIONS/JNI_Functions.hpp"
#include "Functions/GeometryFunctions.hpp"
#include "AuxiliaryClasses/Box.hpp"
#include <android/log.h>

using namespace std;

#ifdef __cplusplus
extern "C" {
#endif

	/**
		\brief Java Native Interface function called from Java which handles all calculations and visualizing of the data used for the Withdrawal-Action

		@param env a JNIEnv pointer variable pointing to the Java Native Interface Environment variable
		@param jo a jobject variable containing an object of the Java Class calling this function
		@param frameAddress a jlong variable containing the memory address of a cv::Mat object containing frame data which is generated by Java via the camera
		@param componentNumber a jint variable containing the number of the box of the active component which has to be withdrawn

		Calculates all data needed for displaying of withdrawal locations and shows them for the given frame

		@see proc::gnrc::correctColors()
		@see proc::gnrc::contourVector()
		@see proc::gnrc::rectangleVector()
		@see proc::gnrc::centerPointsVector()

		@see proc::wdr::cornerPointsVector()
		@see proc::wdr::gridPointsVectors()
		@see proc::wdr::boxesVector()
		@see proc::wdr::displayWithdrawal()
		@see cnst::BOTTOM_STICKERS_RED
		@see cnst::COLOR_RADIUS_BOTTOM
		@see cnst::TOP_STICKERS_BLUE
		@see cnst::COLOR_RADIUS_TOP

		@see Java/Android Component Documentation
		@see de.ur.juergenhahn.ba.Handler.NativeHandler.processWithdrawal
	*/
	JNIEXPORT jint JNICALL Java_de_ur_juergenhahn_ba_Handler_NativeHandler_processWithdrawalNative(JNIEnv *env, jobject jo, jlong frameAddress, jint componentNumber)
	{
		int compNum = (int) componentNumber;

		double maxAreaRed = 0.0, maxAreaBlue = 0.0;

		vector<vector<cv::Point>> contours, middlePoints;
		vector<cv::Point> points, corners, topPoints, bottomPoints;

		vector<cv::Rect> topReferenceRects, bottomReferenceRects;

		vector<aux::Box> boxes;

		cv::Mat & frame = *(cv::Mat *) frameAddress;

		proc::gnrc::correctColors(frame);
		proc::gnrc::contourVector(contours, maxAreaRed, frame, cnst::BOTTOM_STICKERS_RED - cnst::COLOR_RADIUS_BOTTOM, cnst::BOTTOM_STICKERS_RED + cnst::COLOR_RADIUS_BOTTOM);
		proc::gnrc::rectangleVector(topReferenceRects, contours);
		proc::gnrc::contourVector(contours, maxAreaBlue, frame, cnst::TOP_STICKERS_BLUE - cnst::COLOR_RADIUS_TOP, cnst::TOP_STICKERS_BLUE + cnst::COLOR_RADIUS_TOP);
		proc::gnrc::rectangleVector(bottomReferenceRects, contours);
		proc::gnrc::centerPointsVector(points, topReferenceRects, bottomReferenceRects);
		proc::wdr::cornerPointsVector(corners, points);
		proc::wdr::gridPointsVectors(topPoints, middlePoints, bottomPoints, corners);
		proc::wdr::boxesVector(boxes, topPoints, middlePoints, bottomPoints, corners);
		proc::wdr::displayWithdrawal(frame, boxes, compNum, corners);

		return 0;
	}

	/**
		\brief Java Native Interface function called from Java which handles all calculations and visualizing of the data used for the Implementation-Action

		@param env a JNIEnv pointer variable pointing to the Java Native Interface Environment variable
		@param jo a jobject variable containing an object of the Java Class calling this function
		@param frameAddress a jlong variable containing the memory address of a cv::Mat object containing frame data which is generated by Java via the camera
		@param componentNumber a jint variable containing the number of the box of the active component which has to be withdrawn

		Calculates all data needed for displayal of implementation locations and shows them for the given frame

		@see proc::gnrc::correctColors()
		@see proc::gnrc::contourVector()
		@see proc::gnrc::rectangleVector()
		@see proc::gnrc::centerPointsVector()

		@see proc::asmb::targetPointsVector()
		@see proc::asmb::insertionPlacesVector()
		@see proc::asmb::displayImplementation()

		@see cnst::BOTTOM_STICKERS_RED
		@see cnst::COLOR_RADIUS_BOTTOM
		@see cnst::TOP_STICKERS_BLUE
		@see cnst::COLOR_RADIUS_TOP

		@see Java/Android Component Documentation
		@see de.ur.juergenhahn.ba.Handler.NativeHandler.processImplementation()
	*/
	JNIEXPORT jint JNICALL Java_de_ur_juergenhahn_ba_Handler_NativeHandler_processImplementationNative(JNIEnv *env, jobject jo, jlong frameAddress, jint componentNumber)
	{
		int compNum = (int) componentNumber;
		double maxAreaRed = 0.0, maxAreaBlue = 0.0;

		vector<vector<cv::Point> > contours, assemblyPlaces;

		vector<cv::Rect> topReferenceRects, bottomReferenceRects;
		vector<cv::Point> points, targetPoints;

		cv::Mat & frame = *(cv::Mat *) frameAddress;

		proc::gnrc::correctColors(frame);
		proc::gnrc::contourVector(contours, maxAreaRed, frame, cnst::BOTTOM_STICKERS_RED - cnst::COLOR_RADIUS_BOTTOM, cnst::BOTTOM_STICKERS_RED + cnst::COLOR_RADIUS_BOTTOM);
		proc::gnrc::rectangleVector(topReferenceRects, contours);
		proc::gnrc::contourVector(contours, maxAreaBlue, frame, cnst::TOP_STICKERS_BLUE - cnst::COLOR_RADIUS_TOP, cnst::TOP_STICKERS_BLUE + cnst::COLOR_RADIUS_TOP);
		proc::gnrc::rectangleVector(bottomReferenceRects, contours);
		proc::gnrc::centerPointsVector(points, topReferenceRects, bottomReferenceRects);
		proc::asmb::targetPointsVector(targetPoints, points);
		proc::asmb::insertionPlacesVector(assemblyPlaces, targetPoints, compNum);
		proc::asmb::displayImplementation(frame, targetPoints, assemblyPlaces);

		return 0;
	}

#ifdef __cplusplus
}
#endif
